#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

###############################################################################
# This script is used to copy a VM image (SRC) to the image repository as DST
# Several SRC types are supported
###############################################################################

# -------- Set up the environment to source common tools & conf ------------

if [ -z "${ONE_LOCATION}" ]; then
    LIB_LOCATION=/usr/lib/one
else
    LIB_LOCATION=$ONE_LOCATION/lib
fi

. $LIB_LOCATION/sh/scripts_common.sh

DRIVER_PATH=$(dirname $0)
source ${DRIVER_PATH}/../libfs.sh
source ${DRIVER_PATH}/emc.conf
source ${DRIVER_PATH}/func.sh

# -------- Get cp and datastore arguments from OpenNebula core ------------

DRV_ACTION=$1
ID=$2

UTILS_PATH="${DRIVER_PATH}/.."

XPATH="${DRIVER_PATH}/../xpath.rb -b $DRV_ACTION"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <($XPATH     /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CLI_HOSTNAME \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CLI_USER \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/CLI_PASSWORD \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/BLOCK_SIZE \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RAID_GROUP_ID \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/RAID_GROUP_RAIDLEVEL \
                    /DS_DRIVER_ACTION_DATA/IMAGE/PATH \
                    /DS_DRIVER_ACTION_DATA/IMAGE/SIZE \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/MD5 \
                    /DS_DRIVER_ACTION_DATA/IMAGE/TEMPLATE/SHA1 \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/NO_DECOMPRESS \
                    /DS_DRIVER_ACTION_DATA/DATASTORE/TEMPLATE/LIMIT_TRANSFER_BW)

CLI_HOSTNAME="${XPATH_ELEMENTS[j++]}"
CLI_USER="${XPATH_ELEMENTS[j++]}"
CLI_PASSWORD="${XPATH_ELEMENTS[j++]}"
BLOCK_SIZE="${XPATH_ELEMENTS[j++]:-$BLOCK_SIZE}"
RAID_GROUP_ID="${XPATH_ELEMENTS[j++]}"
RAID_GROUP_RAIDLEVEL="${XPATH_ELEMENTS[j++]}"
SRC="${XPATH_ELEMENTS[j++]}"
SIZE="${XPATH_ELEMENTS[j++]}"
MD5="${XPATH_ELEMENTS[j++]}"
SHA1="${XPATH_ELEMENTS[j++]}"
NO_DECOMPRESS="${XPATH_ELEMENTS[j++]}"
LIMIT_TRANSFER_BW="${XPATH_ELEMENTS[j++]}"


NAVISECCLI="/opt/Navisphere/bin/naviseccli -User $CLI_USER -Password $CLI_PASSWORD -Address $CLI_HOSTNAME -Scope 0 "

# Semaphor - LOCK
semaphor_on
echo $ID >> $LOCK

## Create a new LUN
# 1. Find empty LUN id
CMD="$NAVISECCLI getlun | awk '/^Name/{print \$3}' | sort -n | awk 'BEGIN{l=100}{if(\$1 > 100){if( l+1 < \$1){exit} l=\$1} }END{print l+1}'"
LUN_ID=`echo $CMD | sh`
log "A new LUN id is $LUN_ID"

# 2. Find about SPx LUN provisioning
CMD="$NAVISECCLI getlun | awk -F: '/Default Owner/{A[\$2]++} END{B=100000; for(i in A){if(A[i]<B){C=i;B=A[i]}};print C}' | sed -e 's/ //g'"
SP=`echo $CMD | sh`

# Protection about removing current LUNs
if [ $LUN_ID -lt 2 ]; then
   exit 1;
fi

# 3. bind new LUN
CMD="$NAVISECCLI bind $RAID_GROUP_RAIDLEVEL $LUN_ID -rg $RAID_GROUP_ID -sq mb -cap $SIZE -sp ${SP: -1}"
exec_and_log "$CMD" "Error creating new LUN"

# Semaphor - UNLOCK
semaphor_off $LUN_ID

## Assign LUN to host
assign_image_to_host $LUN_ID `hostname`
DEV=$(create_block_device $LUN_ID)


## Download and copy image to block device DEV

DOWNLOADER_ARGS=`set_downloader_args "$MD5" "$SHA1" "$NO_DECOMPRESS" "$LIMIT_TRANSFER_BW" "$SRC" -`

COPY_COMMAND="$UTILS_PATH/downloader.sh $DOWNLOADER_ARGS"

case $SRC in
http://*|https://*)
    log "Downloading $SRC to the image repository"

    DUMP="$COPY_COMMAND"
    ;;

*)
    if [ `check_restricted $SRC` -eq 1 ]; then
        log_error "Not allowed to copy images from $RESTRICTED_DIRS"
        error_message "Not allowed to copy image file $SRC"
        exit -1
    fi

    log "Copying local image $SRC to the image repository"

    DUMP="$COPY_COMMAND"
    ;;
esac

exec_and_log "eval $DUMP | $SUDO $DD of=$DEV bs=1M" \
    "Error dumping $SRC to $DST_HOST:$DEV"

## Unassign LUN from host
log "Unconnecting $LUN_ID"
drop_block_device $LUN_ID
unassign_image_from_host $LUN_ID `hostname`

## Return
echo "$LUN_ID"
