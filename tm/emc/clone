#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# clone fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
DST=$2

VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)


#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

SRC_PATH=`arg_path $SRC`
DST_PATH=`arg_path $DST`

DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`


ssh_make_path $DST_HOST $DST_DIR

#-------------------------------------------------------------------------------
# Get Datastore information for communication with EMC controller
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${DST_PATH} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID| $XPATH \
                    /DATASTORE/TEMPLATE/CLI_HOSTNAME \
                    /DATASTORE/TEMPLATE/CLI_USER \
                    /DATASTORE/TEMPLATE/CLI_PASSWORD \
                    /DATASTORE/TEMPLATE/BLOCK_SIZE \
                    /DATASTORE/TEMPLATE/RAID_GROUP_ID \
                    /DATASTORE/TEMPLATE/RAID_GROUP_RAIDLEVEL)

CLI_HOSTNAME="${XPATH_ELEMENTS[j++]}"
CLI_USER="${XPATH_ELEMENTS[j++]}"
CLI_PASSWORD="${XPATH_ELEMENTS[j++]}"
BLOCK_SIZE="${XPATH_ELEMENTS[j++]:-$BLOCK_SIZE}"
RAID_GROUP_ID="${XPATH_ELEMENTS[j++]}"
RAID_GROUP_RAIDLEVEL="${XPATH_ELEMENTS[j++]}"

. $DRIVER_PATH/../../datastore/emc/func.sh

#-------------------------------------------------------------------------------
# Get information about Image size and generate a new LUN ID
#-------------------------------------------------------------------------------

SIZE=$($NAVISECCLI getlun $SRC_PATH | awk -F: '/Megabytes/{print$2}')

# Semaphor - LOCK
semaphor_on
echo $VMID >> $LOCK

# 1. Find empty LUN id
CMD="$NAVISECCLI getlun | awk '/^Name/{print \$3}' | sort -n | awk 'BEGIN{l=-1}{if( l+1 < \$1){exit} l=\$1 }END{print l+1}'"
LUN_ID=`echo $CMD | sh`
#TODO: Max limit

# 2. Find about SPx LUN provisioning
CMD="$NAVISECCLI getlun | awk -F: '/Default Owner/{A[\$2]++} END{B=100000; for(i in A){if(A[i]<B){C=i;B=A[i]}};print C}' | sed -e 's/ //g'"
SP=`echo $CMD | sh`

# Protection against removing current LUNs
if [ $LUN_ID -lt 2 ]; then
   exit 1;
fi

CMD="$NAVISECCLI bind $RAID_GROUP_RAIDLEVEL $LUN_ID -rg $RAID_GROUP_ID -sq mb -cap $SIZE -sp ${SP: -1}"
log "Creating a temporary LUN: $CMD"
exec_and_log "$CMD" "Error creating new LUN"

# Semaphor - UNLOCK
semaphor_off $LUN_ID

#-------------------------------------------------------------------------------
# Assign LUN to Host
#-------------------------------------------------------------------------------

assign_image_to_host $SRC_PATH $DST_HOST
assign_image_to_host $LUN_ID $DST_HOST

#-------------------------------------------------------------------------------
# Refresh SCSI & Make link to system DS
#-------------------------------------------------------------------------------

CLONE_CMD=$(cat <<EOF
    set -e
    source /var/lib/one/remotes/datastore/emc/func.sh
    create_block_device $SRC_PATH $DST_PATH.original
    create_block_device $LUN_ID $DST_PATH
    nice -n 19 dd if=$DST_PATH.original of=$DST_PATH bs=10M > /dev/null 2>&1 || echo "Error in DD"
    rm $DST_PATH.original
    drop_block_device $SRC_PATH
EOF
)

ssh_exec_and_log "$DST_HOST" "$CLONE_CMD" \
        "Error cloning $DST_HOST:LUN $SRC_PATH -> $LUN_ID"

#-------------------------------------------------------------------------------
# Unassign LUN from Host
#-------------------------------------------------------------------------------
# TODO: this can be problem for cases when there is a number of deployments
# at the same time a the same machine. 
unassign_image_from_host $SRC_PATH $DST_HOST

exit 0
